// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Nursery.Infrastructure.DBContext;

#nullable disable

namespace Nursery.Infrastructure.Migrations
{
    [DbContext(typeof(NurseryDbContext))]
    [Migration("20240927150836_inetial")]
    partial class inetial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Nursery.Domin.Models.Category", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CategoryId"));

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CategoryId");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("Nursery.Domin.Models.Kind", b =>
                {
                    b.Property<int>("KindId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("KindId"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("KindName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SectorId")
                        .HasColumnType("int");

                    b.HasKey("KindId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("SectorId");

                    b.ToTable("Kinds");
                });

            modelBuilder.Entity("Nursery.Domin.Models.Plant", b =>
                {
                    b.Property<int>("PlantId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PlantId"));

                    b.Property<string>("Barcode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DisposalDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PlantName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("PricePay")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("PriceSel")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("PurchaseInvoiceId")
                        .HasColumnType("int");

                    b.Property<string>("Source")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("kindId")
                        .HasColumnType("int");

                    b.HasKey("PlantId");

                    b.HasIndex("PurchaseInvoiceId");

                    b.HasIndex("kindId");

                    b.ToTable("Plants");
                });

            modelBuilder.Entity("Nursery.Domin.Models.PurchaseInvoice", b =>
                {
                    b.Property<int>("PurchaseInvoiceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PurchaseInvoiceId"));

                    b.Property<int>("Amount")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("PurchaseInvoiceId");

                    b.ToTable("PurchaseInvoices");
                });

            modelBuilder.Entity("Nursery.Domin.Models.SaleInvoice", b =>
                {
                    b.Property<int>("SaleInvoiceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SaleInvoiceId"));

                    b.Property<int>("Amount")
                        .HasColumnType("int");

                    b.Property<string>("CurrencyCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("SaleInvoiceId");

                    b.ToTable("SaleInvoices");
                });

            modelBuilder.Entity("Nursery.Domin.Models.SaleInvoicePlant", b =>
                {
                    b.Property<int>("SaleInvoiceId")
                        .HasColumnType("int");

                    b.Property<int>("PlantId")
                        .HasColumnType("int");

                    b.Property<string>("BarcodePlant")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SaleInvoiceId", "PlantId");

                    b.HasIndex("PlantId");

                    b.ToTable("SaleInvoicePlants");
                });

            modelBuilder.Entity("Nursery.Domin.Models.Sector", b =>
                {
                    b.Property<int>("SectorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SectorId"));

                    b.Property<string>("SectorName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SectorId");

                    b.ToTable("Sectors");
                });

            modelBuilder.Entity("Nursery.Domin.Models.SectorPlant", b =>
                {
                    b.Property<int>("SectorId")
                        .HasColumnType("int");

                    b.Property<int>("PlantId")
                        .HasColumnType("int");

                    b.Property<string>("BarcodePlant")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SectorId", "PlantId");

                    b.HasIndex("PlantId");

                    b.ToTable("SectorPlants");
                });

            modelBuilder.Entity("Nursery.Domin.Models.Kind", b =>
                {
                    b.HasOne("Nursery.Domin.Models.Category", "Category")
                        .WithMany("kinds")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Nursery.Domin.Models.Sector", "Sector")
                        .WithMany("kinds")
                        .HasForeignKey("SectorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Sector");
                });

            modelBuilder.Entity("Nursery.Domin.Models.Plant", b =>
                {
                    b.HasOne("Nursery.Domin.Models.PurchaseInvoice", "PurchaseInvoice")
                        .WithMany("Plants")
                        .HasForeignKey("PurchaseInvoiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Nursery.Domin.Models.Kind", "kind")
                        .WithMany("Plants")
                        .HasForeignKey("kindId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PurchaseInvoice");

                    b.Navigation("kind");
                });

            modelBuilder.Entity("Nursery.Domin.Models.SaleInvoicePlant", b =>
                {
                    b.HasOne("Nursery.Domin.Models.Plant", "Plant")
                        .WithMany("SaleInvoicePlants")
                        .HasForeignKey("PlantId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Nursery.Domin.Models.SaleInvoice", "SaleInvoice")
                        .WithMany("SaleInvoicePlants")
                        .HasForeignKey("SaleInvoiceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Plant");

                    b.Navigation("SaleInvoice");
                });

            modelBuilder.Entity("Nursery.Domin.Models.SectorPlant", b =>
                {
                    b.HasOne("Nursery.Domin.Models.Plant", "Plant")
                        .WithMany("SectorPlants")
                        .HasForeignKey("PlantId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Nursery.Domin.Models.Sector", "Sector")
                        .WithMany("Sectorplants")
                        .HasForeignKey("SectorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Plant");

                    b.Navigation("Sector");
                });

            modelBuilder.Entity("Nursery.Domin.Models.Category", b =>
                {
                    b.Navigation("kinds");
                });

            modelBuilder.Entity("Nursery.Domin.Models.Kind", b =>
                {
                    b.Navigation("Plants");
                });

            modelBuilder.Entity("Nursery.Domin.Models.Plant", b =>
                {
                    b.Navigation("SaleInvoicePlants");

                    b.Navigation("SectorPlants");
                });

            modelBuilder.Entity("Nursery.Domin.Models.PurchaseInvoice", b =>
                {
                    b.Navigation("Plants");
                });

            modelBuilder.Entity("Nursery.Domin.Models.SaleInvoice", b =>
                {
                    b.Navigation("SaleInvoicePlants");
                });

            modelBuilder.Entity("Nursery.Domin.Models.Sector", b =>
                {
                    b.Navigation("Sectorplants");

                    b.Navigation("kinds");
                });
#pragma warning restore 612, 618
        }
    }
}
